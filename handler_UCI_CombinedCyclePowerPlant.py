# coding: utf8

""" Python file with methods to handle the UCI_CombinedCyclePowerPlant DataFile.

Remarks
----------
Information from UCI WebPage:

Data Set Information:
=====================

The dataset contains 9568 data points collected from a Combined Cycle Power
Plant over 6 years (2006-2011), when the power plant was set to work with full
load. Features consist of hourly average ambient variables Temperature (T),
Ambient Pressure (AP), Relative Humidity (RH) and Exhaust Vacuum (V) to predict
the net hourly electrical energy output (EP) of the plant.
A combined cycle power plant (CCPP) is composed of gas turbines (GT), steam
turbines (ST) and heat recovery steam generators. In a CCPP, the electricity
is generated by gas and steam turbines, which are combined in one cycle, and is
transferred from one turbine to another. While the Vacuum is colected from and
has effect on the Steam Turbine, he other three of the ambient variables effect
the GT performance.
For comparability with our baseline studies, and to allow 5x2 fold statistical
tests be carried out, we provide the data shuffled five times. For each
shuffling 2-fold CV is carried out and the resulting 10 measurements are used
for statistical testing.
We provide the data both in .ods and in .xlsx formats.


Attribute Information:
=======================

Features consist of hourly average ambient variables
- Temperature (T) in the range 1.81°C and 37.11°C,
- Ambient Pressure (AP) in the range 992.89-1033.30 milibar,
- Relative Humidity (RH) in the range 25.56% to 100.16%
- Exhaust Vacuum (V) in teh range 25.36-81.56 cm Hg
- Net hourly electrical energy output (EP) 420.26-495.76 MW
The averages are taken from various sensors located around the plant that record
the ambient variables every second. The variables are given without normalization.

References
-----------
[1] Pınar Tüfekci, Prediction of full load electrical power output of a base load
    operated combined cycle power plant using machine learning methods,
    International Journal of Electrical Power & Energy Systems, Volume 60,
    September 2014, Pages 126-140
"""
import os

import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler, scale

# Get basepath such that only relatives paths matter from this folder on
basepath = os.path.dirname(os.path.realpath(__file__))


def read_all(return_type = 'np', scaling = 'None'):
    """
    Reads the complete excel sheet and returns it as a 2D Numpy Array or pandas
    DataFrame. If 2D Numpy Array is chosen as return type, the alleged Y
    variable (according to the description) is stored in the last column.

    Parameters
    --------------
    return_type : string ('np' or 'pd')
        Datatype of return object. If 'np', data is returned as a 2D numpy array.
        If 'pd', data is returned as a 2D DataFrame

    scaling : string 'MinMax', 'MeanVar', or 'None'
        Determines the column-wise scaling of the data.
        
    Returns
    -------------
    Returns the data object containing the entire excel sheet. If return_type is
    'np', return object is a 2D Numpy Array storing the Y-variable in the last
    column. Else it is a pandas dataframe with the descriptors given in the
    excel sheet.
    """
    data = pd.read_excel(basepath + \
                    '/UCI_CombinedCyclePowerPlant/Folds5x2_pp.xlsx')
    cols = data.columns.tolist()
    if scaling == 'MinMax':
        minmaxscaler = MinMaxScaler(feature_range=(-1, 1))
        data[cols[:-1]] = minmaxscaler.fit_transform(data[cols[:-1]])
    elif scaling == 'MeanVar':
        data[cols[:-1]] = scale(data[cols[:-1]])
    if return_type == 'np':
        return data.as_matrix()
    elif return_type == 'pd':
        return data
    else:
        raise RuntimeError("Choose return_type = 'np' or 'pd' to read data.")
